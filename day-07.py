my_input = [ 3,8,1001,8,10,8,105,1,0,0,21,38,63,72,81,106,187,268,349,430,99999,3,9,101,5,9,9,1002,9,3,9,101,3,9,9,4,9,99,3,9,102,3,9,9,101,4,9,9,1002,9,2,9,1001,9,2,9,1002,9,4,9,4,9,99,3,9,1001,9,3,9,4,9,99,3,9,102,5,9,9,4,9,99,3,9,102,4,9,9,1001,9,2,9,1002,9,5,9,1001,9,2,9,102,3,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99 ]
example = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0]
example2 = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5]

from common import Intcode

def part_one( data ):
  max = 0
  for a in range(5):
    for b in range(5):
      if b == a:
        continue
      for c in range(5):
        if c in [a,b]:
          continue
        for d in range(5):
          if d in [a,b,c]:
            continue
          for e in range(5):
            if e in [a,b,c,d]:
              continue

            result = 0
            for phase in [a,b,c,d,e]:
              amp = Intcode( data[:] )
              result = amp.process( [phase,result])
            if result > max:
              max = result

  return max

def part_two( data ):

  max = 0
  for a in range(5):
    for b in range(5):
      if b == a:
        continue
      for c in range(5):
        if c in [a,b]:
          continue
        for d in range(5):
          if d in [a,b,c]:
            continue
          for e in range(5):
            if e in [a,b,c,d]:
              continue

            phases = [x+5 for x in [a,b,c,d,e]]

            amp = []
            for p in phases:
              amp.append( Intcode(data[:], p) )

            cur = 0
            last_result = 0
            while( last_result is not None ):
              last_result = amp[cur].process( last_result )
              cur = (cur + 1) % 5

            if amp[4].getOutput() > max:
              max = amp[4].getOutput()

  return max

print( part_one( my_input ) )
print( part_two( my_input ) )
